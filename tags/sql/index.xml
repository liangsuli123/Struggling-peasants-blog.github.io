<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on 梁苏莉的博客</title>
    <link>https://liangsuli123.github.io/tags/sql/</link>
    <description>Recent content in sql on 梁苏莉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Aug 2021 14:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://liangsuli123.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql常见的三种数据库引擎</title>
      <link>https://liangsuli123.github.io/posts/mysql/sql/</link>
      <pubDate>Sun, 01 Aug 2021 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/mysql/sql/</guid>
      <description>MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制， 索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能</description>
    </item>
    
    <item>
      <title>MySql数据库备份的几种方式</title>
      <link>https://liangsuli123.github.io/posts/mysql/sql/</link>
      <pubDate>Fri, 02 Jul 2021 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/mysql/sql/</guid>
      <description>mysqldump工具备份 备份整个数据库 $&amp;gt; mysqldump -u root -h host -p dbname &amp;gt; backdb.sql 备份数据库中的某个表 $&amp;gt; mysqldump -u root -h host -p dbname tbname1, tbname2 &amp;gt; backdb.sql 备份多个数据库 $&amp;gt; mysqldump -u root -h host -p --databases dbname1, dbname2 &amp;gt; backdb.sql 备份系统中所有数据库 $&amp;gt; mysqldump -u root -h host -p --all-databases &amp;gt; backdb.sql 直接复制整个数据库</description>
    </item>
    
    <item>
      <title>数据库分表分库</title>
      <link>https://liangsuli123.github.io/posts/sql_1/</link>
      <pubDate>Wed, 03 Apr 2019 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/sql_1/</guid>
      <description>分表分库 1、分库 当数据库中的表太多，将某些表分到不同数据库，例如：1W张表时 代价：连表查询跨数据库，代码变多 2、分表 水平分表：将某些列拆分到另一张表，例如：博客+博客详情 垂直分表：将某些历史信息，分到</description>
    </item>
    
    <item>
      <title>关于mysql联合索引的最左前缀原则以及b&#43;tree</title>
      <link>https://liangsuli123.github.io/posts/sql1/</link>
      <pubDate>Tue, 02 Apr 2019 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/sql1/</guid>
      <description>关于mysql联合索引的最左前缀原则以及b+tree 软件版本mysql5.7 根据官网的文档 https://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html 查询条件要符合最左原则才能使用到索引 首先说说联合索引的好处： 覆盖索引，这一点是最重要的，重所周知非主键索引会</description>
    </item>
    
    <item>
      <title>数据库索引</title>
      <link>https://liangsuli123.github.io/posts/sql/</link>
      <pubDate>Tue, 02 Apr 2019 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/sql/</guid>
      <description>索引 主键索引，外键索引，联合索引，唯一索引 索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率 1. 当数据多且字段值有相同的值得时候用普通索引。 2. 当字段多且字段值没有重复的时候用唯一索引。 3. 当有多个</description>
    </item>
    
    <item>
      <title>数据库优化</title>
      <link>https://liangsuli123.github.io/posts/english-preview/</link>
      <pubDate>Mon, 01 Apr 2019 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/english-preview/</guid>
      <description>1.sql 语句的优化 1、创建数据表时把固定长度的放在前面（） 2、将固定数据放入内存： 例如：choice字段 （django中有用到，数字1、2、3…… 对应相应内容） 3、char 和 varchar 的区别(char可变, varc</description>
    </item>
    
  </channel>
</rss>