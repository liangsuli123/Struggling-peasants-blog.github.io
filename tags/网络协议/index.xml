<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络协议 on 梁苏莉的博客</title>
    <link>https://liangsuli123.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link>
    <description>Recent content in 网络协议 on 梁苏莉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 30 Dec 2018 14:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://liangsuli123.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>  Django &#43; Uwsgi &#43; Nginx 的生产环境部署  </title>
      <link>https://liangsuli123.github.io/posts/d10/</link>
      <pubDate>Sun, 30 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d10/</guid>
      <description>1、Web协议介绍 Web协议出现顺序： CGI -&amp;gt; FCGI -&amp;gt; WSGI -&amp;gt; uwsgi 1. CGI： 最早的协议 2. FCGI： 比CGI快 3. WSGI： Python专用的协议 4. uwsgi： 比FCGI和WSGI都快，是uWSGI项目自有的协议，主要</description>
    </item>
    
    <item>
      <title>  Django中的缓存  </title>
      <link>https://liangsuli123.github.io/posts/d10/</link>
      <pubDate>Sat, 29 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d10/</guid>
      <description>1、Django缓存作用 1. 由于Django是动态网站，所有每次请求均会去数据进行相应的操作，当程序访问量大时，耗时必然会更加明显 2. 缓存将一个某个views的返回值保存至内存或者memcache中，5分</description>
    </item>
    
    <item>
      <title> Django序列化操作 </title>
      <link>https://liangsuli123.github.io/posts/d9/</link>
      <pubDate>Fri, 28 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d9/</guid>
      <description>1、为什么需要需要序列化操作 1. python中很多格式的数据类型不能通过简单的json直接序列化转换成字符串格式传递到前端 2. 比如：form提交出现错误，返回的是Django的errors.dict对象，</description>
    </item>
    
    <item>
      <title> Django进阶篇 </title>
      <link>https://liangsuli123.github.io/posts/d8/</link>
      <pubDate>Mon, 24 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d8/</guid>
      <description>1.1 Cookie 返回顶部 1、cookie简介 1. cookie实质就是客户端硬盘中存放的键值对，利用这个特性可以用来做用户验证 2. 比如：{“username”: “dachengzi”} #再次访问url就会携带这些信息过</description>
    </item>
    
    <item>
      <title> Django基础篇 </title>
      <link>https://liangsuli123.github.io/posts/d7/</link>
      <pubDate>Thu, 20 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d7/</guid>
      <description>1、web框架本质 1. 对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。 2. 真实web框架一般会分为两部分：服务器程序和应用程序。 1）服务器程序负责对</description>
    </item>
    
    <item>
      <title> Memcached </title>
      <link>https://liangsuli123.github.io/posts/d6/</link>
      <pubDate>Sun, 16 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d6/</guid>
      <description>1.1 Memcached简介与安装 返回顶部 1、Memcached简介 1. Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。 2. 它通过在内存中缓存数据和对象来减少读取数据库的次数，从而</description>
    </item>
    
    <item>
      <title> Redis缓存系统 </title>
      <link>https://liangsuli123.github.io/posts/d5/</link>
      <pubDate>Sat, 08 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d5/</guid>
      <description>1.1 在centos6.5中安装Redis 返回顶部 1. 到官网下载Redis：https://redis.io/download 2. 或者直在Linux下运行下面命令 $ wget http://download.redis.io/releases/redis-3.2.8.tar.gz $ tar xzf redis-3.2.8.tar.gz $ cd redis-3.2.8 $ make 3. 先启动Redis服务</description>
    </item>
    
    <item>
      <title> 数据库-消息队列 &amp; 缓存系统 </title>
      <link>https://liangsuli123.github.io/posts/d4/</link>
      <pubDate>Sat, 08 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d4/</guid>
      <description>RabbitMQ 1.1 RabbitMq与Redis队列对比 返回顶部 1、RabbitMQ与Redis作用 1. RabbitMQ: RabbitMQ是一个可以在不同程序间共享数据的代理，是实现AMQP（高级消息队列协议）的消息中间件的一种 2. Redis: 是</description>
    </item>
    
    <item>
      <title> 通讯录管理 </title>
      <link>https://liangsuli123.github.io/posts/d3/</link>
      <pubDate>Mon, 03 Dec 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d3/</guid>
      <description>1.1 概述 &amp;amp; 开启API接口同步 返回顶部 官方文档：http://work.weixin.qq.com/api/doc#10016 1.2 成员管理 返回顶部 1、创建成员 官方文档：http://work.weixin.</description>
    </item>
    
    <item>
      <title> 消息推送 </title>
      <link>https://liangsuli123.github.io/posts/d2/</link>
      <pubDate>Thu, 29 Nov 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d2/</guid>
      <description>1.1 概述 返回顶部 官方文档：http://work.weixin.qq.com/api/doc#12739 1.2 发送应用消息 返回顶部 参考文档：http://work.weixin.qq.com/api/doc</description>
    </item>
    
    <item>
      <title> 企业微信API开发前准备 </title>
      <link>https://liangsuli123.github.io/posts/d1/</link>
      <pubDate>Sun, 25 Nov 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/d1/</guid>
      <description>1.1 术语介绍 返回顶部 参考文档：http://work.weixin.qq.com/api/doc#10013 企业微信管理后台： https://work.weixin.qq.com/wework_admin/frame 1、corpid：ww2f9a1a85f1806981 每个企业都拥有唯一的</description>
    </item>
    
    <item>
      <title> 云监控 </title>
      <link>https://liangsuli123.github.io/posts/git/c12/</link>
      <pubDate>Tue, 20 Nov 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/git/c12/</guid>
      <description>1、云监控相关接口 复制代码 #! /usr/bin/env python # -*- coding: utf-8 -*- from tencentcloud.common import credential from tencentcloud.common.profile.client_profile import ClientProfile from tencentcloud.common.profile.http_profile import HttpProfile from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException from tencentcloud.monitor.v20180724 import monitor_client, models from day04.settings import secretKey,secretId # 导入腾讯云账户secretId，secretKey值 # 实例化一个认证对象，入参需要传入腾讯云账户secre</description>
    </item>
    
    <item>
      <title> 腾讯云API-云服务器 </title>
      <link>https://liangsuli123.github.io/posts/c11/</link>
      <pubDate>Wed, 14 Nov 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c11/</guid>
      <description>1、腾讯云SDK使用举例 网址：https://cloud.tencent.com/document/sdk/Python 复制代码 #! /usr/bin/env python # -*- coding: utf-8 -*- from tencentcloud.common import credential from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException # 导入对应产品模块的client mode</description>
    </item>
    
    <item>
      <title> git分支管理 </title>
      <link>https://liangsuli123.github.io/posts/git/c9/</link>
      <pubDate>Sat, 03 Nov 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/git/c9/</guid>
      <description>参考博客：https://www.cnblogs.com/gzpblog/p/5463031.html 1、git常用命令 echo &amp;quot;#Description&amp;quot; &amp;gt; README.md， 添加一个文件 git status， 查看当前状态，发现有未跟踪</description>
    </item>
    
    <item>
      <title> Git基本常用命令 </title>
      <link>https://liangsuli123.github.io/posts/git/c8/</link>
      <pubDate>Sun, 28 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/git/c8/</guid>
      <description>mkdir： XX (创建一个空目录 XX指目录名) pwd： 显示当前目录的路径。 git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。 git add XX 把xx文件添加到暂存区去。 git commit –m “XX” 提交文件 –m 后面</description>
    </item>
    
    <item>
      <title>  git &amp; github </title>
      <link>https://liangsuli123.github.io/posts/git/c7/</link>
      <pubDate>Wed, 24 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/git/c7/</guid>
      <description>1. 为什么要使用版本控制 1、举例说明： 1）假设你在的公司要上线一个新功能，你们开发团队为实现这个新功能，写了大约5000行代码，上线没2 天，就发现这个功能用户并不喜欢，你老板让你去掉这个功能，你怎么办？</description>
    </item>
    
    <item>
      <title>  CI（持续集成）/CD（持续交付/持续部署） </title>
      <link>https://liangsuli123.github.io/posts/c6/</link>
      <pubDate>Sat, 20 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c6/</guid>
      <description></description>
    </item>
    
    <item>
      <title> docker高级篇 </title>
      <link>https://liangsuli123.github.io/posts/c5/</link>
      <pubDate>Thu, 18 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c5/</guid>
      <description>Docker Compose 1、Docker Compose 介绍 1. Compose是一个定义和管理多容器的工具，使用Python语言编写。 2. 使用Compose配置文件描述多个容器应用的架构，比如使用什么镜像、数据卷、网络、映射端口等； 3. 然后</description>
    </item>
    
    <item>
      <title> docker常用命令 </title>
      <link>https://liangsuli123.github.io/posts/c3/</link>
      <pubDate>Wed, 10 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c3/</guid>
      <description>1、docker镜像管理常用命令 docker help # 查看docker帮助 docker image --help # 查看 docker中 镜像相关帮助 docker image ls # 查看当前所有镜像 docker image inspect nginx # 查看指定镜像（nginx镜像）详细信息 docker pull nginx:1.14 # 下载指定版本镜像 nginx docker image rm</description>
    </item>
    
    <item>
      <title> docker 基本使用 </title>
      <link>https://liangsuli123.github.io/posts/c2/</link>
      <pubDate>Sat, 06 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c2/</guid>
      <description>1、docker与虚拟机比较 2、docker版本 1. 社区版（Community Edition, CE） 2. 企业版（Enterprise Edition, EE） 1.2 docker安装 1、docker安装参考官方文档 1. docker官方文档：ht</description>
    </item>
    
    <item>
      <title> itchat发送微信消息 </title>
      <link>https://liangsuli123.github.io/posts/c1/</link>
      <pubDate>Mon, 01 Oct 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/c1/</guid>
      <description>1、运行程序，会弹出二维码，扫描授权后即可实现自动回复信息 参考01 参考02 复制代码 #coding=utf8 import itchat, time from itchat.content import * @itchat.msg_register([TEXT, MAP, CARD, NOTE, SHARING]) def text_reply(msg): itchat.send(&#39;%s: %s&#39; % (msg[&#39;Type&#39;], msg[&#39;Text&#39;]), msg[&#39;FromUserName&#39;]) @itchat.msg_register([PICTURE, RECORDING, ATTACHMENT, VIDEO]) def download_files(msg): msg[&#39;Text&#39;](msg[&#39;FileName&#39;]) return &#39;@%s@%s&#39; % ({&#39;Picture&#39;: &#39;img&#39;, &#39;Video&#39;: &#39;vid&#39;}.get(msg[&#39;Type&#39;], &#39;fil&#39;), msg[&#39;FileName&#39;]) @itchat.msg_register(FRIENDS) def add_friend(msg): itchat.add_friend(**msg[&#39;Text&#39;]) # 该操作会自动将新好友的消息录入，不</description>
    </item>
    
    <item>
      <title> python3使用email和smtplib库发送邮件 </title>
      <link>https://liangsuli123.github.io/posts/b18/</link>
      <pubDate>Wed, 26 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b18/</guid>
      <description>注：python代理登录qq邮箱发邮件，是需要更改自己qq邮箱设置的。在这里大家需要做两件事情：邮箱开启SMTP功能 、获得授权码 教程链接 1、给单个人发邮件 参考 复制代码 from email.mime.text import MIMEText from email.header import Header from smtplib import SMTP_SSL #qq邮箱</description>
    </item>
    
    <item>
      <title>django&#43;celery&#43;redis实现异步周期任务  </title>
      <link>https://liangsuli123.github.io/posts/b17/</link>
      <pubDate>Fri, 21 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b17/</guid>
      <description>注：python的celery模块 4.2.0版本， 刚开始安装的未4.1.1版本，但是定时任务居然不执行 1、在settings.py中配置celery 复制代码 #1、如果在django中需要周期性执行，在</description>
    </item>
    
    <item>
      <title>celery与Django项目最佳实践  </title>
      <link>https://liangsuli123.github.io/posts/b16/</link>
      <pubDate>Mon, 17 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b16/</guid>
      <description>1、在Django中使用celery介绍（celery无法再windows下运行） 1）在Django中使用celery时，celery文件必须以tasks.py 2）Django会自动到每个APP中找t</description>
    </item>
    
    <item>
      <title> celery简单使用 </title>
      <link>https://liangsuli123.github.io/posts/b15/</link>
      <pubDate>Thu, 13 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b15/</guid>
      <description>1、安装 1. 安装celery： pip3 install celery # ln -s /usr/local/python3/bin/celery /bin/celery 2. 安装redis 2、创建tasks.py文件进行验证 复制代码 from celery import Celery import time app = Celery(&#39;TASK&#39;, broker=&#39;redis://localhost&#39;, backend=&#39;redis://localhost&#39;) @app.task def add(x, y): print(&amp;quot;running..add.&amp;quot;, x, y) return x + y @app.task def minus(x, y): time.sleep(60) print(&amp;quot;running..minus.&amp;quot;, x, y) return x - y 复制代码 1、启动Celery</description>
    </item>
    
    <item>
      <title>Celery介绍</title>
      <link>https://liangsuli123.github.io/posts/b14/</link>
      <pubDate>Sat, 08 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b14/</guid>
      <description>参考博客：http://www.cnblogs.com/alex3714/p/6351797.html 1、celery应用举例 1、Celery 是一个 基于python开发的分布式异步消息任务队列，通过它</description>
    </item>
    
    <item>
      <title>数据索引index</title>
      <link>https://liangsuli123.github.io/posts/b13/</link>
      <pubDate>Mon, 03 Sep 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b13/</guid>
      <description>1、通过索引值或索引标签获取数据 复制代码 import numpy as np, pandas as pd #1、通过列表生成Series s4 = pd.Series(np.array([1,2,3,4])) print s4 # 0 1 # 1 2 # 2 3 # 3 4 #2、为Series自定义的索引值 s4.index = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] print s4 # a 1 # b 2 # c 3 # d 4 #3、通过两种</description>
    </item>
    
    <item>
      <title>Python数据分析之pandas学习</title>
      <link>https://liangsuli123.github.io/posts/b12/</link>
      <pubDate>Thu, 30 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b12/</guid>
      <description>参考博客：http://www.cnblogs.com/nxld/p/6058591.html 1、pandas介绍 1. 在pandas中有两类非常重要的数据结构，即序列Series和数据框DataFram</description>
    </item>
    
    <item>
      <title>http简介</title>
      <link>https://liangsuli123.github.io/posts/b11/</link>
      <pubDate>Sat, 25 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b11/</guid>
      <description>1、什么是http 1. HTTP是一个客户端和服务器端请求和应答的标准（TCP） 2. 设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法 2、http报文格式 1）请求行 求方法字段、URL字段和HT</description>
    </item>
    
    <item>
      <title>tcp/ip基本知识</title>
      <link>https://liangsuli123.github.io/posts/b10/</link>
      <pubDate>Mon, 20 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b10/</guid>
      <description>1:tcp/ip基本知识 1.1 tcp常识 1、网络七层 2、TCP三层握手 复制代码 ####1、第一次握手 # 建立连接时，客户端发送SYN包到服务器，其中包含客户端的初始序号seq=x，并进入SYN_SENT状态</description>
    </item>
    
    <item>
      <title>事件驱动、五种I/O操作、I/O多路复用select和epoll</title>
      <link>https://liangsuli123.github.io/posts/b8/</link>
      <pubDate>Sun, 12 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b8/</guid>
      <description>1、什么是事件驱动 定义：就是根据不同事件触发处理不同的事情（根据事件做反应），将要处理的事件加入队列中而不是立刻处理 2、使用UI编程的点击事件理解事件驱动 1） 目前大部分的UI编程都是事件驱动模型，如很</description>
    </item>
    
    <item>
      <title>使用线程池、进程池、协程向多个url并发获取页面数据比较</title>
      <link>https://liangsuli123.github.io/posts/b7/</link>
      <pubDate>Wed, 08 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b7/</guid>
      <description>特点： 1．进程：启用进程非常浪费资源 2．线程：线程多，并且在阻塞过程中无法执行其他任务 3．协程：gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理 1、</description>
    </item>
    
    <item>
      <title>Python进程池和线程池</title>
      <link>https://liangsuli123.github.io/posts/b6/</link>
      <pubDate>Sun, 05 Aug 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b6/</guid>
      <description>1、简介 参考官网 1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程/多进程代码 2、但是当项目达到一定的规模，频繁创建/销毁进程或者线程是非常消耗资</description>
    </item>
    
    <item>
      <title>协程</title>
      <link>https://liangsuli123.github.io/posts/b5/</link>
      <pubDate>Tue, 10 Jul 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b5/</guid>
      <description>1、什么是协程（进入上一次调用的状态） 1. 协程，又称微线程，纤程，协程是一种用户态的轻量级线程。 2. 线程的切换会保存到CPU的栈里，协程拥有自己的寄存器上下文和栈， 3. 协程调度切换时，将寄存器上下文和栈保存</description>
    </item>
    
    <item>
      <title>线程，进程应用场景</title>
      <link>https://liangsuli123.github.io/posts/b4/</link>
      <pubDate>Sun, 08 Jul 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b4/</guid>
      <description>1、多线程和多进程各自应用场景 1. I/O操作不占用CPU（从硬盘，网路读入数据等） 2. 计算占用CPU，这种情况最好不用多线程 3. python多线程不适合CPU密集型的任务，适合I/O密集型的任务 4. pytho</description>
    </item>
    
    <item>
      <title>线程，进程</title>
      <link>https://liangsuli123.github.io/posts/b3/</link>
      <pubDate>Thu, 05 Jul 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b3/</guid>
      <description>1、什么是进程(process)？（进程是资源集合） 1. 程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，这种执行的程序就称之为进程 2. 程序和进程的区别就在于：程序是指令的集合，它是进</description>
    </item>
    
    <item>
      <title> SocketServer服务</title>
      <link>https://liangsuli123.github.io/posts/b2/</link>
      <pubDate>Sun, 10 Jun 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b2/</guid>
      <description>1、SocketServer作用 1. socket无法支持多并发，SocketServer 可以实现多并发 2. SocketServer使编写一个Socket服务器通信变得更加简单 3. SocketServer其实</description>
    </item>
    
    <item>
      <title>socket模块</title>
      <link>https://liangsuli123.github.io/posts/b1/</link>
      <pubDate>Tue, 05 Jun 2018 14:26:00 +0800</pubDate>
      
      <guid>https://liangsuli123.github.io/posts/b1/</guid>
      <description>1、socket起源 1. socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用【打开】【读写】【关闭】模式来操作。 2. socket就是该模式的一个实现，socket即</description>
    </item>
    
  </channel>
</rss>